/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package za.co.protogen.core.domain.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import za.co.protogen.core.domain.models.delegate.UpdateReservationApiDelegate;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-09T22:41:04.315909+02:00[Africa/Johannesburg]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "Reservation", description = "the Reservation API")
public interface UpdateReservationApi {

    default UpdateReservationApiDelegate getDelegate() {
        return new UpdateReservationApiDelegate() {};
    }

    /**
     * PATCH /updateReservation/{reservationId}/{sWhat}/{sTo} : Update a reservation
     *
     * @param reservationId The unique identifier for the reservation (required)
     * @param sWhat What to change (only the listed letters) (required)
     * @param sTo content to update reservation field with (required)
     * @return Successful. responds with message and corresponding reservation (status code 200)
     *         or Wrong letter option selected (status code 400)
     *         or Reservation Id not found or Repository Empty (status code 404)
     */
    @Operation(
        operationId = "updateReservation",
        summary = "Update a reservation",
        tags = { "Reservation", "update", "change" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful. responds with message and corresponding reservation", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Wrong letter option selected", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "Reservation Id not found or Repository Empty", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/updateReservation/{reservationId}/{sWhat}/{sTo}",
        produces = { "text/html" }
    )
    
    default ResponseEntity<String> updateReservation(
        @Parameter(name = "reservationId", description = "The unique identifier for the reservation", required = true, in = ParameterIn.PATH) @PathVariable("reservationId") Long reservationId,
        @Size(min = 1, max = 1) @Parameter(name = "sWhat", description = "What to change (only the listed letters)", required = true, in = ParameterIn.PATH) @PathVariable("sWhat") String sWhat,
        @Parameter(name = "sTo", description = "content to update reservation field with", required = true, in = ParameterIn.PATH) @PathVariable("sTo") String sTo
    ) {
        return getDelegate().updateReservation(reservationId, sWhat, sTo);
    }

}
