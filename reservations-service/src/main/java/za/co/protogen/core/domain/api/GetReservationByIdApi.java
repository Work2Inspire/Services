/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package za.co.protogen.core.domain.api;

import za.co.protogen.core.domain.models.delegate.GetReservationByIdApiDelegate;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-09T22:41:04.315909+02:00[Africa/Johannesburg]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "Reservation", description = "the Reservation API")
public interface GetReservationByIdApi {

    default GetReservationByIdApiDelegate getDelegate() {
        return new GetReservationByIdApiDelegate() {};
    }

    /**
     * GET /getReservation_ById/{id} : Returns a reservation using its unique identifier
     *
     * @param id The unique identifier for the reservation (required)
     * @return Successful. responds with message and corresponding reservation (status code 200)
     *         or Reservation Id not found or Repository Empty (status code 404)
     */
    @Operation(
        operationId = "getReservationById",
        summary = "Returns a reservation using its unique identifier",
        tags = { "Reservation", "Id", "get" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful. responds with message and corresponding reservation", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "Reservation Id not found or Repository Empty", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/getReservation_ById/{id}",
        produces = { "text/html" }
    )
    
    default ResponseEntity<String> getReservationById(
        @Parameter(name = "id", description = "The unique identifier for the reservation", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return getDelegate().getReservationById(id);
    }

}
