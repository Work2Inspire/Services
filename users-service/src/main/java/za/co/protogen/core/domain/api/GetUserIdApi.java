/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package za.co.protogen.core.domain.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import za.co.protogen.core.domain.models.delegate.GetUserIdApiDelegate;

import javax.validation.Valid;
import javax.validation.constraints.*;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-10T10:21:23.805578500+02:00[Africa/Johannesburg]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "user", description = "the user API")
public interface GetUserIdApi {

    default GetUserIdApiDelegate getDelegate() {
        return new GetUserIdApiDelegate() {};
    }

    /**
     * GET /getUser_id : Find and Return user using userId
     *
     * @param userId userId of the user to return (required)
     * @return Successful. Responds message and with user (status code 200)
     *         or No User matches userId criteria or repository empty (status code 404)
     */
    @Operation(
        operationId = "getById",
        summary = "Find and Return user using userId",
        tags = { "user", "find", "id", "return" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful. Responds message and with user", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "No User matches userId criteria or repository empty", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/getUser_id",
        produces = { "text/html" }
    )
    
    default ResponseEntity<String> getById(
        @NotNull @Parameter(name = "userId", description = "userId of the user to return", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) int userId
    ) {
        return getDelegate().getById(userId);
    }

}
