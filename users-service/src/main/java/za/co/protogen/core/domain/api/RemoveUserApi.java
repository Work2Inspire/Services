/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package za.co.protogen.core.domain.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import za.co.protogen.core.domain.models.delegate.RemoveUserApiDelegate;

import javax.validation.Valid;
import javax.validation.constraints.*;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-10T10:21:23.805578500+02:00[Africa/Johannesburg]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "users", description = "the users API")
public interface RemoveUserApi {

    default RemoveUserApiDelegate getDelegate() {
        return new RemoveUserApiDelegate() {};
    }

    /**
     * DELETE /remove_user : Find and Delete user using userId)
     *
     * @param id Id of user to remove (required)
     * @return Successful responds with message and all users in repository (status code 200)
     *         or User not found or No users in repository (status code 404)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Find and Delete user using userId)",
        tags = { "users", "remove", "delete" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful responds with message and all users in repository", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found or No users in repository", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/remove_user",
        produces = { "text/html" }
    )
    
    default ResponseEntity<String> deleteUser(
        @NotNull @Parameter(name = "id", description = "Id of user to remove", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = true) Long id
    ) {
        return getDelegate().deleteUser(id);
    }

}
